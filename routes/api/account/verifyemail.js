const router = require('express').Router()
const bodyParser = require('body-parser')
var crypto = require('crypto')
const mongoose = require('mongoose')

const mailgun = require('../../../my_modules/mailgun')
const accountAPI = require('../../../my_modules/accountapi')

const ForumSettings = mongoose.model("ForumSettings")
const PendingEmailVerifications = mongoose.model("PendingEmailVerifications")
const Logs = mongoose.model("Logs")

// parse application/json
router.use(bodyParser.urlencoded({ extended: true }))
router.use(bodyParser.json({limit: '5mb'}))

// 	/api/account/verifyemail

router.post('/', async (req, res) => {
	let response = {success: false}

	try {
		//Only an actual acount should be able to send email verification
		if(!req.session.uid) "Must be logged in"

		//Check if they've already received an email verification in the past 24 hours
		let pendingEmailVerification = await PendingEmailVerifications.findById(req.session.uid)
		if(!pendingEmailVerification) throw "Your email is already verified"
		
		let expires = new Date(pendingEmailVerification.lastsent)
		expires.setDate(expires.getDate()+1) //Adds 1 day to current date
		if(expires > new Date()) throw "You must wait 24 hours since the last verification request email was sent. Please check your email if its there."
		
		//Where to send the verification step to
		var accData = await accountAPI.fetchAccount(req.session.uid)

		//Check if we can email this address
		if(!mailgun.isEmailCompatible(accData.email)) throw "We can not send emails to that email provider. Please change your email address!"

		// Create email verification session

		//Creates verification token
		var hash = crypto.randomBytes(64).toString('hex');

		//Send verification email
		var emailBody = 'Hello,\n\n' +
		`An email verification re-request has been made for, ${accData.username}(ID:${req.session.uid}), at ${process.env.FORUM_URL} using your email. Any token sent prior to this verification request is now invalid and has been replaced by the following token. To verify this address, please visit the link below. In doing so, you remove restriction from services such as posting to the forum and enable higher account security.\n\n` +
		`${process.env.FORUM_URL}/verify?token=${hash}\n\n` + 
		`This message was generated by ${process.env.FORUM_URL}.`
		
		await mailgun.SendBasicEmail(accData.email, `${(await ForumSettings.findOne({type: "name"})).value} Email Verification`, emailBody)
		.then(async err=>{
			if(err) throw err

			//The email has sent, so update token in database to be verified against
			//This assumes there is already a pending_email_verifications row for the requester uid
			await PendingEmailVerifications.updateOne({_id: req.session.uid}, {
				token: hash,
				lastsent: new Date()
			})

			//Log the email change request so we can rate limit to 1 email change request/day. This is rate limited so I don't get over charged by mailgun api
			await new Logs({
				uid: req.session.uid,
				action: "update_email",
				description: "re-requested for: " + accData.email, //Changed to this email
				date: new Date() //Current date
			}).save()
		})
		
		response.success = "true"
	}
	catch(error){
		if(typeof error === "string") response.reason = error
		else if('safe' in error) response.reason = error.safe
		else{
			console.warn(error)
			res.reason = "Server error"
		}
	}
	
	res.json(response)
});

module.exports = router;